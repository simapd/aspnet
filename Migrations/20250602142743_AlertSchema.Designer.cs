// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Simapd.Models;

#nullable disable

namespace SimapdApi.Migrations
{
    [DbContext(typeof(SimapdDb))]
    [Migration("20250602142743_AlertSchema")]
    partial class AlertSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Simapd.Models.Alert", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("EmmitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("emmited_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("Origin")
                        .HasColumnType("integer")
                        .HasColumnName("origin");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("alerts");
                });

            modelBuilder.Entity("Simapd.Models.RiskArea", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("risk_areas");
                });

            modelBuilder.Entity("Simapd.Models.Sensor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("area_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InstalledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("installed_at");

                    b.Property<DateTime?>("MaintainedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("maintained_at");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("sensors");
                });

            modelBuilder.Entity("Simapd.Models.Alert", b =>
                {
                    b.HasOne("Simapd.Models.RiskArea", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Simapd.Models.Sensor", b =>
                {
                    b.HasOne("Simapd.Models.RiskArea", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });
#pragma warning restore 612, 618
        }
    }
}
